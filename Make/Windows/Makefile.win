# Data structure from command line
STRUCTURE ?= .

# Main folders
SRC_DIR := $(STRUCTURE)
TEST_DIR := $(SRC_DIR)/Test
OBJ_DIR := $(TEST_DIR)/objects

# Source code and headers folders
C_SOURCE := $(wildcard $(SRC_DIR)/*.c)
H_SOURCE := $(wildcard $(SRC_DIR)/*.h)
TEST_SOURCE := $(TEST_DIR)/test.c

# Executable name
PROJ_NAME := $(TEST_DIR)/test.exe

# Compiled objects
OBJ := $(patsubst $(SRC_DIR)/%.c,$(OBJ_DIR)/%.o,$(C_SOURCE))
TEST_OBJ := $(OBJ_DIR)/test.o

# Compiler
CC := gcc

# Flags
CC_FLAGS := -Wall -c

# Remove commands
RM := del /Q /F
RMDIR := rmdir /S /Q

.PHONY: all clean run objFolder

# Common target
all: objFolder $(PROJ_NAME)

# Create object folder
OBJ_DIR_WIN := $(subst /,\,$(OBJ_DIR))
TEST_SOURCE_WIN := $(subst /,\,$(TEST_SOURCE))
objFolder:
	@if not exist "$(TEST_SOURCE_WIN)" ( \
		echo Error: test.c not found in $(TEST_DIR) && exit 1 \
	) else ( \
		if not exist "$(OBJ_DIR_WIN)" mkdir "$(OBJ_DIR_WIN)" \
	)

# To link all objects and generate the binary
$(PROJ_NAME): $(OBJ) $(TEST_OBJ)
	@echo Linking...
	$(CC) $^ -o $@
	@echo Compiled: $(PROJ_NAME)

# Rule to compile data structure sources
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c $(SRC_DIR)/%.h
	@echo Compiling structure: $<
	$(CC) $(CC_FLAGS) $< -o $@

# Rule to compile the test file
$(TEST_OBJ): $(TEST_SOURCE)
	@echo Compiling test: $<
	$(CC) $(CC_FLAGS) -I$(SRC_DIR) $< -o $@

# Run the test
run: all
	cls
	@echo Executing test...
	$(PROJ_NAME)

# Clean objects and binary
PROJ_NAME_WIN := $(subst /,\,$(PROJ_NAME))
clean:
	@echo Cleaning...
	@$(RM) $(OBJ_DIR_WIN)\*.o > NUL 2>&1 || exit 0
	@$(RMDIR) $(OBJ_DIR_WIN) > NUL 2>&1 || exit 0
	@$(RM) $(PROJ_NAME_WIN) > NUL 2>&1 || exit 0
